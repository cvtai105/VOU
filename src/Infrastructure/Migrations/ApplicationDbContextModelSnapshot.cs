// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Field")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab6"),
                            Name = "Brand 1",
                            UserId = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab4")
                        });
                });

            modelBuilder.Entity("Domain.Entities.BrandBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("BrandBranches");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab9"),
                            BrandId = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab6"),
                            EndAt = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "",
                            Name = "Event Example",
                            StartAt = new DateTime(2024, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.EventVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("VoucherId");

                    b.ToTable("EventVouchers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab10"),
                            EventId = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab9"),
                            Quantity = 100000000,
                            VoucherId = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab7")
                        },
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab11"),
                            EventId = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab9"),
                            Quantity = 1,
                            VoucherId = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab8")
                        });
                });

            modelBuilder.Entity("Domain.Entities.ExchangePiece", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("VoucherPieceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.HasIndex("VoucherPieceId");

                    b.ToTable("ExchangePieces");
                });

            modelBuilder.Entity("Domain.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GamePrototypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("GamePrototypeId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab26"),
                            EndTime = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab9"),
                            GamePrototypeId = new Guid("9e4f49fe-0786-44c6-9061-53d2ed84fab3"),
                            StartTime = new DateTime(2024, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab27"),
                            EndTime = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab9"),
                            GamePrototypeId = new Guid("9e4f49fe-0786-44c6-9061-1232aa84fab3"),
                            StartTime = new DateTime(2024, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("Domain.Entities.GamePrototype", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanExchangeVoucherPieces")
                        .HasColumnType("bit");

                    b.Property<string>("GameplayInstruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GamePrototypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e4f49fe-0786-44c6-9061-53d2ed84fab3"),
                            CanExchangeVoucherPieces = false,
                            GameplayInstruction = "Answer the questions in livestream, choose right answers exceeding threshold to win a voucher",
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRCqwR5F3YJTWvePHVfsLoUgppmfPwEKJTV3A&s",
                            Name = "Quiz Game",
                            Status = "Active",
                            Type = "Quiz"
                        },
                        new
                        {
                            Id = new Guid("9e4f49fe-0786-44c6-9061-1232aa84fab3"),
                            CanExchangeVoucherPieces = true,
                            GameplayInstruction = "Shake your phone to win a voucher piece, combine all difference pieces to get a voucher",
                            ImageUrl = "https://play-lh.googleusercontent.com/gtcbFGJIhU9Zfni1REuvrzlyQ0AnSV-9wUlL_hf32ACzwGAfeL1ttJJ09RSfvFoNA7nI=w240-h480-rw",
                            Name = "Shake Game",
                            Status = "Active",
                            Type = "Shake"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CorrectAnswer")
                        .HasColumnType("int");

                    b.Property<Guid>("QuestionSetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionSetId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab18"),
                            AnswerList = "Hanoi;Ho Chi Minh;Da Nang;Hue",
                            Content = "What is the capital of Vietnam?",
                            CorrectAnswer = 1,
                            QuestionSetId = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab17")
                        },
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab19"),
                            AnswerList = "Lyon;Paris;Marseille;Nice",
                            Content = "What is the capital of France?",
                            CorrectAnswer = 2,
                            QuestionSetId = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab17")
                        },
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab20"),
                            AnswerList = "New York;Washington D.C;Los Angeles;Chicago",
                            Content = "What is the capital of USA?",
                            CorrectAnswer = 3,
                            QuestionSetId = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab17")
                        },
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab21"),
                            AnswerList = "Tokyo;Osaka;Kyoto;Hokkaido",
                            Content = "What is the capital of Japan?",
                            CorrectAnswer = 4,
                            QuestionSetId = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab17")
                        },
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab22"),
                            AnswerList = "Seoul;Busan;Incheon;Daegu",
                            Content = "What is the capital of South Korea?",
                            CorrectAnswer = 1,
                            QuestionSetId = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab17")
                        },
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab23"),
                            AnswerList = "Beijing;Shanghai;Guangzhou;Shenzhen",
                            Content = "What is the capital of China?",
                            CorrectAnswer = 2,
                            QuestionSetId = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab17")
                        },
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab24"),
                            AnswerList = "Bangkok;Chiang Mai;Phuket;Pattaya",
                            Content = "What is the capital of Thailand?",
                            CorrectAnswer = 3,
                            QuestionSetId = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab17")
                        },
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab25"),
                            AnswerList = "Singapore;Sentosa;Jurong;Changi",
                            Content = "What is the capital of Singapore?",
                            CorrectAnswer = 4,
                            QuestionSetId = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab17")
                        });
                });

            modelBuilder.Entity("Domain.Entities.QuestionSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("QuestionSets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab17"),
                            BrandId = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab6"),
                            Name = "Question Set 1"
                        });
                });

            modelBuilder.Entity("Domain.Entities.QuizzGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventGameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GamePrototypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionSetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WiningScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventGameId");

                    b.HasIndex("GamePrototypeId");

                    b.HasIndex("QuestionSetId");

                    b.ToTable("QuizzGames");
                });

            modelBuilder.Entity("Domain.Entities.ShakeGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventGameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GamePrototypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VoucherPieceCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventGameId");

                    b.HasIndex("GamePrototypeId");

                    b.ToTable("ShakeGames");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab3"),
                            Email = "player@example.com",
                            FullName = "Player 1",
                            Hash = "jZae727K08KaOmKSgOaGzww/XVqGr/PKEgIMkjrcbJI=",
                            ImageUrl = "",
                            Phone = "0333444555",
                            Role = "player"
                        },
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab4"),
                            Email = "brand@example.com",
                            FullName = "Brand 1",
                            Hash = "jZae727K08KaOmKSgOaGzww/XVqGr/PKEgIMkjrcbJI=",
                            ImageUrl = "",
                            Phone = "0333444556",
                            Role = "brand"
                        },
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab5"),
                            Email = "admin@example.com",
                            FullName = "Admin 1",
                            Hash = "jZae727K08KaOmKSgOaGzww/XVqGr/PKEgIMkjrcbJI=",
                            ImageUrl = "",
                            Phone = "0333444557",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TurnsLeft")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEvents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab16"),
                            EventId = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab9"),
                            TurnsLeft = 300,
                            UserId = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab3")
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserPiece", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VoucherPieceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherPieceId");

                    b.ToTable("UserPieces");
                });

            modelBuilder.Entity("Domain.Entities.UserVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("UserVouchers");
                });

            modelBuilder.Entity("Domain.Entities.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PieceCount")
                        .HasColumnType("int");

                    b.Property<string>("QrCodeUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Vouchers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab7"),
                            BrandId = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab6"),
                            Code = "Voucher 1",
                            Description = "Đổi 1 tỉ tiền mặt",
                            ExpiredAt = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "",
                            PieceCount = 2,
                            QrCodeUrl = "",
                            Quantity = 10000000,
                            Value = 1000000
                        },
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab8"),
                            BrandId = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab6"),
                            Code = "Voucher 2",
                            Description = "Chúc bạn 1 ngày zui zẻ",
                            ExpiredAt = new DateTime(2024, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "",
                            PieceCount = 2,
                            QrCodeUrl = "",
                            Quantity = 10000000,
                            Value = 1000000
                        });
                });

            modelBuilder.Entity("Domain.Entities.VoucherPiece", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PieceNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherPieces");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab12"),
                            ImageUrl = "https://roflmagnets.com/447-medium_default/number-1.jpg",
                            PieceNumber = 1,
                            VoucherId = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab7")
                        },
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab13"),
                            ImageUrl = "https://roflmagnets.com/304-large_default/number-2.jpg",
                            PieceNumber = 2,
                            VoucherId = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab7")
                        },
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab14"),
                            ImageUrl = "https://roflmagnets.com/447-medium_default/number-1.jpg",
                            PieceNumber = 1,
                            VoucherId = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab8")
                        },
                        new
                        {
                            Id = new Guid("9e4f49fe-0783-44c6-9061-3d2ed84fab15"),
                            ImageUrl = "https://roflmagnets.com/304-large_default/number-2.jpg",
                            PieceNumber = 2,
                            VoucherId = new Guid("9e4f49fe-0783-44c6-9061-53d2ed84fab8")
                        });
                });

            modelBuilder.Entity("Domain.Entities.WishList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Brands")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.BrandBranch", b =>
                {
                    b.HasOne("Domain.Entities.Brand", "Brand")
                        .WithMany("BrandBranches")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.HasOne("Domain.Entities.Brand", "Brand")
                        .WithMany("Events")
                        .HasForeignKey("BrandId");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Domain.Entities.EventVoucher", b =>
                {
                    b.HasOne("Domain.Entities.Event", "Event")
                        .WithMany("EventVouchers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Voucher", "Voucher")
                        .WithMany("EventVouchers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Domain.Entities.ExchangePiece", b =>
                {
                    b.HasOne("Domain.Entities.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId");

                    b.HasOne("Domain.Entities.VoucherPiece", "VoucherPiece")
                        .WithMany()
                        .HasForeignKey("VoucherPieceId");

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");

                    b.Navigation("VoucherPiece");
                });

            modelBuilder.Entity("Domain.Entities.Game", b =>
                {
                    b.HasOne("Domain.Entities.Event", "Event")
                        .WithMany("Games")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GamePrototype", "GamePrototype")
                        .WithMany()
                        .HasForeignKey("GamePrototypeId");

                    b.Navigation("Event");

                    b.Navigation("GamePrototype");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.HasOne("Domain.Entities.QuestionSet", "QuestionSet")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionSet");
                });

            modelBuilder.Entity("Domain.Entities.QuestionSet", b =>
                {
                    b.HasOne("Domain.Entities.Brand", "Brand")
                        .WithMany("QuestionSets")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Domain.Entities.QuizzGame", b =>
                {
                    b.HasOne("Domain.Entities.Game", "EventGame")
                        .WithMany()
                        .HasForeignKey("EventGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GamePrototype", "GamePrototype")
                        .WithMany()
                        .HasForeignKey("GamePrototypeId");

                    b.HasOne("Domain.Entities.QuestionSet", "QuestionSet")
                        .WithMany()
                        .HasForeignKey("QuestionSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGame");

                    b.Navigation("GamePrototype");

                    b.Navigation("QuestionSet");
                });

            modelBuilder.Entity("Domain.Entities.ShakeGame", b =>
                {
                    b.HasOne("Domain.Entities.Game", "EventGame")
                        .WithMany()
                        .HasForeignKey("EventGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GamePrototype", "GamePrototype")
                        .WithMany()
                        .HasForeignKey("GamePrototypeId");

                    b.Navigation("EventGame");

                    b.Navigation("GamePrototype");
                });

            modelBuilder.Entity("Domain.Entities.UserEvent", b =>
                {
                    b.HasOne("Domain.Entities.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserPiece", b =>
                {
                    b.HasOne("Domain.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VoucherPiece", "VoucherPiece")
                        .WithMany()
                        .HasForeignKey("VoucherPieceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");

                    b.Navigation("VoucherPiece");
                });

            modelBuilder.Entity("Domain.Entities.UserVoucher", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserVouchers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Voucher", "Voucher")
                        .WithMany("UserVouchers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Domain.Entities.Voucher", b =>
                {
                    b.HasOne("Domain.Entities.Brand", "Brand")
                        .WithMany("Vouchers")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Domain.Entities.VoucherPiece", b =>
                {
                    b.HasOne("Domain.Entities.Voucher", "Voucher")
                        .WithMany("VoucherPieces")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Domain.Entities.WishList", b =>
                {
                    b.HasOne("Domain.Entities.Event", "Event")
                        .WithMany("WishLists")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("WishLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Navigation("BrandBranches");

                    b.Navigation("Events");

                    b.Navigation("QuestionSets");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Navigation("EventVouchers");

                    b.Navigation("Games");

                    b.Navigation("UserEvents");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("Domain.Entities.QuestionSet", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("UserEvents");

                    b.Navigation("UserVouchers");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("Domain.Entities.Voucher", b =>
                {
                    b.Navigation("EventVouchers");

                    b.Navigation("UserVouchers");

                    b.Navigation("VoucherPieces");
                });
#pragma warning restore 612, 618
        }
    }
}
